fitcll=glm(died~Insecticide*lnD+Insecticide*lnD2, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="logit"), data=datna)
#summary(fitlogit)
fitprob_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="probit"), data=datna)
#summary(fitprob)
fitcll_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#stargazer(fitlogit, fitprob, fitcll, fitlogit_s, fitprob_s, fitcll_s)
#Además con el modelo completo también los criterios AIC y BIC coinciden
# ("AIC:logit probit cloglog")
# c(AIC(fitlogit), AIC(fitprob),  AIC(fitcll))
# ("BIC:logit probit cloglog")
# c(BIC(fitlogit), BIC(fitprob), BIC(fitcll))
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,0,
0,0,1,0,0,
0,0,0,1,0,
0,0,0,0,1), ncol=5, nrow=4, byrow=TRUE)
m=c(0,0,0,0)
summary(glht(fitprob_s, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
# Se incluye cierta aleatorización para datos binarios
library(statmod)
fitlogitqr <- qresid(fitprob_s)
#qqnorm( fitlogitqr, las=1 ); qqline( fitlogitqr)
lilKS<-nortest::lillie.test(fitlogitqr)
Shapiro<-shapiro.test(fitlogitqr)
library(ggplot2)
library(ggResidpanel)
resid_panel(fitprob_s, plots=c("all"))
ggplot(data = datosfin, aes(x = Deposit))+
geom_point(aes(y = p_Killed, colour="coral", shape =Insecticide )) +
geom_point(aes(y = prob_s, colour="deepskyblue", shape = Insecticide)) +
scale_y_continuous(sec.axis = sec_axis(~ .*1,  name="probit")) + theme_bw()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("https://raw.githubusercontent.com/LeobardoEnriquezH/Data/main/Preg3B.csv", show_col_types = FALSE)
datos$Insecticide<-factor(datos$Insecticide) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$Insecticide<-relevel(datos$Insecticide,"A")
#Creamos dato de proporcion de insectos que mueren
datos$p_Killed<-datos$Killed/datos$Number
ggplot(data=datos, aes(x=Deposit,y=p_Killed, colour=Insecticide))+ geom_point()+ theme_classic()+
theme(text = element_text(size = 11),element_line(linewidth =0.5))
#Convertimos a datos desagrupados (más común en la práctica)
#library(tidyverse)
datos$NoKilled<-datos$Number-datos$Killed
datna_1=datos %>% group_by(Killed,Insecticide,Deposit) %>%
do( data.frame(died= rep(1, .$Killed)))
datna_2=datos %>% group_by(Killed,Insecticide,Deposit) %>%
do( data.frame(died= rep(0, .$NoKilled)))
datna<-rbind(datna_1,datna_2)
#Generar variables con datos en logaritmos
datna$lnD=log(datna$Deposit)
#datos$lnD=factor(datos$lnD) #declaramos la variable como factor
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(died~Insecticide*lnD, family = binomial(link="logit"), data=datna)
#summary(fitlogit)
fitprob=glm(died~Insecticide*lnD, family = binomial(link="probit"), data=datna)
#summary(fitprob)
fitcll=glm(died~Insecticide*lnD, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit_s=glm(died~Insecticide+lnD, family = binomial(link="logit"), data=datna)
#summary(fitlogit)
fitprob_s=glm(died~Insecticide+lnD, family = binomial(link="probit"), data=datna)
#summary(fitprob)
fitcll_s=glm(died~Insecticide+lnD, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#stargazer(fitlogit, fitprob, fitcll, fitlogit_s, fitprob_s, fitcll_s)
#A continuación se muestran los valores AIC y BIC, respectivamente, para las ligas logit, probit y cloglog. Como se mencinó anteriormente, se elige el modelo con el menor AIC, que es el de la liga probit.
#Además con el modelo completo también los criterios AIC y BIC coinciden
# ("AIC:logit probit cloglog")
# c(AIC(fitlogit), AIC(fitprob),  AIC(fitcll))
# ("BIC:logit probit cloglog")
# c(BIC(fitlogit), BIC(fitprob), BIC(fitcll))
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,
0,0,1,0,
0,0,0,1), ncol=4, nrow=3, byrow=TRUE)
m=c(0,0,0)
summary(glht(fitprob_s, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
datna$lnD2=datna$lnD*datna$lnD
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(died~Insecticide*lnD+Insecticide*lnD2, family = binomial(link="logit"), data=datna)
#summary(fitlogit)
fitprob=glm(died~Insecticide*lnD+Insecticide*lnD2, family = binomial(link="probit"), data=datna)
#summary(fitprob)
fitcll=glm(died~Insecticide*lnD+Insecticide*lnD2, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="logit"), data=datna)
#summary(fitlogit)
fitprob_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="probit"), data=datna)
#summary(fitprob)
fitcll_s=glm(died~Insecticide+lnD +lnD2, family = binomial(link="cloglog"), data=datna)
#summary(fitcll)
#stargazer(fitlogit, fitprob, fitcll, fitlogit_s, fitprob_s, fitcll_s)
#Además con el modelo completo también los criterios AIC y BIC coinciden
# ("AIC:logit probit cloglog")
# c(AIC(fitlogit), AIC(fitprob),  AIC(fitcll))
# ("BIC:logit probit cloglog")
# c(BIC(fitlogit), BIC(fitprob), BIC(fitcll))
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,0,
0,0,1,0,0,
0,0,0,1,0,
0,0,0,0,1), ncol=5, nrow=4, byrow=TRUE)
m=c(0,0,0,0)
summary(glht(fitprob_s, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
# Se incluye cierta aleatorización para datos binarios
library(statmod)
fitlogitqr <- qresid(fitprob_s)
#qqnorm( fitlogitqr, las=1 ); qqline( fitlogitqr)
lilKS<-nortest::lillie.test(fitlogitqr)
Shapiro<-shapiro.test(fitlogitqr)
library(DHARMa)  #Los residuales simulados también son útiles en este caso
set.seed(123)
fitprobitres <- simulateResiduals(fittedModel = fitprob_s)
plot(fitprobitres)
deviance_df<-deviance(fitprob_s)/df.residual(fitprob_s)
newdata <- data.frame(Insecticide = c("A", "A","A","A", "A","A","B","B", "B", "B","B", "B","C","C", "C", "C","C", "C"), lnD = c(0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415), lnD2 = c(0.4804530, 0.9424117, 1.5550895,2.32221, 3.246158, 4.32407, 0.4804530, 0.9424117, 1.5550895,2.32221, 3.246158, 4.32407, 0.4804530, 0.9424117, 1.5550895,2.32221, 3.246158, 4.32407) )
newdata$prob_s <- predict(fitprob_s, newdata[,1:3], type = c("response"), se.fit=TRUE)$fit
newdata$Deposit<-exp(newdata$lnD)
#kable(newdata)
newdata1<- newdata[,-c(1,5)]
datosfin<-cbind(datos,newdata1)
ggplot(data = datosfin, aes(x = Deposit))+
geom_point(aes(y = p_Killed, colour="coral", shape =Insecticide )) +
geom_point(aes(y = prob_s, colour="deepskyblue", shape = Insecticide)) +
scale_y_continuous(sec.axis = sec_axis(~ .*1,  name="probit")) + theme_bw()
ggplot(data=datos, aes(x=Deposit,y=p_Killed, colour=Insecticide))+ geom_point()+ theme_bw()+
theme(text = element_text(size = 11),element_line(linewidth =0.5))
fitprob_s
quad <- function(a, b, c)
{
a <- as.complex(a)
answer <- c((-b + sqrt(b^2 - 4 * a * c)) / (2 * a),
(-b - sqrt(b^2 - 4 * a * c)) / (2 * a))
if(all(Im(answer) == 0)) answer <- Re(answer)
if(answer[1] == answer[2]) return(answer[1])
answer
}
fitprob_s[5]
fitprob_s$coefficients[5]
fitprob_s$coefficients[4]
fitprob_s$coefficients[1]
quad(a = fitprob_s[5], b = fitprob_s[4], c = fitprob_s[1]-0.7)
a=fitprob_s[5]
b=fitprob_s[4]
cfitprob_s[1]-0.7
a=fitprob_s[5]
b=fitprob_s[4]
c=fitprob_s[1]-0.7
View(b)
a=fitprob_s$coefficients[5]
b=fitprob_s$coefficients[4]
c=fitprob_s$coefficients[1]-0.7
quad(a, b, c)
a=fitprob_s$coefficients[5]
b=fitprob_s$coefficients[4]
c=fitprob_s$coefficients[1]-0.7
D_A<-exp(quad(a, b, c))
#Para insecticida B
a=fitprob_s$coefficients[5]
b=fitprob_s$coefficients[4]
c=fitprob_s$coefficients[1]+fitprob_s$coefficients[2]-0.7
D_B<-exp(quad(a, b, c))
#Para insecticida C
a=fitprob_s$coefficients[5]
b=fitprob_s$coefficients[4]
c=fitprob_s$coefficients[1]+fitprob_s$coefficients[3]-0.7
D_C<-exp(quad(a, b, c))
D_C[2]
D_C[1]
tabulate(D_C[1])
kable(D_C[1])
library(multcomp)
K=matrix(c(0,-1,1,0,0,
0, 0,0,1,0), ncol=5, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fitprob_s, linfct=K, rhs=m, alternative="less"), test=Chisqtest())
library(multcomp)
K=matrix(c(0,-1,1,0,0,
0, 0,1,0,0), ncol=5, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fitprob_s, linfct=K, rhs=m, alternative="less"), test=Chisqtest())
library(multcomp)
K=matrix(c(0,1,0,0,0), ncol=5, nrow=1, byrow=TRUE)
m=c(0)
summary(glht(fitprob_s, linfct=K, rhs=m), test=Chisqtest())
library(multcomp)
K=matrix(c(0,0,1,0,0,
0,-1,1,0,0), ncol=5, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fitprob_s, linfct=K, rhs=m, alternative="less"), test=Chisqtest())
library(multcomp)
K=matrix(c(0,0,1,0,0,
0,-1,1,0,0), ncol=5, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fitprob_s, linfct=K, rhs=m, alternative="less"), test=Chisqtest())
library(multcomp)
K=matrix(c(0,0,1,0,0,
0,-1,1,0,0), ncol=5, nrow=2, byrow=TRUE)
m=c(0,0)
summary(glht(fitprob_s, linfct=K, rhs=m, alternative="less"), test=Chisqtest())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg1B.csv", show_col_types = FALSE)
datos$sex<-factor(datos$sex) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$sex<-relevel(datos$sex,"1")
modelo1<-lm(data=datos, bpsystol ~ bmi + sex + age)
#stargazer(modelo1)
#par(mfrow = c(2, 2))
#####check_model function of performance package: Grphs####
pkgs <- c(
"flextable", "performance", "see", "lmtest", "ggplot2",
"qqplotr", "ggrepel", "patchwork", "boot", "rempsyc", "report"
)
#install.packages(pkgs)
library(flextable)
library(performance)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
#check_model(modelo1) #check_model() function of the performance package
###check_model function of performance package: p-values ###
#check_collinearity(modelo1) # VIF
#check_autocorrelation(modelo1) #  Autocorrelated residuals p value
#check_heteroscedasticity(modelo1) # non-constant error variance (heteroscedasticity): p value
#check_outliers(modelo1) # Outliers method and threshold: cook
# check_normality(modelo1) # Normality of residuals p value
par(mfrow = c(2, 2))
plot(modelo1)
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
car::boxTidwell(data=datos, bpsystol ~ bmi + sex + age)
car::boxTidwell(data=datos, bpsystol ~ bmi)
car::boxTidwell(data=datos, bpsystol ~ bmi + sex + age)
car::powerTransform(fit)
car::powerTransform(modelo1)
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[1]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[2]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[3]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[4]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[5]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[6]
modelox=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelox)
#stargazer(modelo2)
car::boxTidwell(data=datos, bpsystol ~ bmi + sex + age)
car::boxTidwell(data=datos, bpsystol ~ bmi)
BoxCoxm1<-car::powerTransform(data=datos, bpsystol ~ bmi)
BoxCoxm1[6]
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[6]
car::powerTransform(modelo1)
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelo2)
#stargazer(modelo2)
par(mfrow = c(2, 2))
plot(modelo2)
table_tests2<-nice_assumptions(modelo2)
table_tests_fin2<-subset(table_tests2, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
AICmodelo1<-AIC(modelo1)
AICmodelo2<-AIC(modelo2)
AICmodelo1<-AIC(modelo1)
AICmodelo2<-AIC(modelo2)
modelo2=lm(data=datos, I(log(bpsystol)) ~ bmi + sex + age)
#summary(modelo2)
#stargazer(modelo2)
par(mfrow = c(2, 2))
plot(modelo2)
table_tests2<-nice_assumptions(modelo2)
table_tests_fin2<-subset(table_tests2, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg1B.csv", show_col_types = FALSE)
datos$sex<-factor(datos$sex) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$sex<-relevel(datos$sex,"1")
modelo1<-lm(data=datos, bpsystol ~ bmi + sex + age)
#stargazer(modelo1)
#par(mfrow = c(2, 2))
#####check_model function of performance package: Grphs####
pkgs <- c(
"flextable", "performance", "see", "lmtest", "ggplot2",
"qqplotr", "ggrepel", "patchwork", "boot", "rempsyc", "report"
)
#install.packages(pkgs)
library(flextable)
library(performance)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
#check_model(modelo1) #check_model() function of the performance package
###check_model function of performance package: p-values ###
#check_collinearity(modelo1) # VIF
#check_autocorrelation(modelo1) #  Autocorrelated residuals p value
#check_heteroscedasticity(modelo1) # non-constant error variance (heteroscedasticity): p value
#check_outliers(modelo1) # Outliers method and threshold: cook
# check_normality(modelo1) # Normality of residuals p value
par(mfrow = c(2, 2))
plot(modelo1)
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[6]
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelo2)
#stargazer(modelo2)
par(mfrow = c(2, 2))
plot(modelo2)
table_tests2<-nice_assumptions(modelo2)
table_tests_fin2<-subset(table_tests2, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
AICmodelo1<-AIC(modelo1)
AICmodelo2<-AIC(modelo2)
curva_ajustada_mujer30 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*30)}
curva_ajustada_hombre30 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*30)}
curva_ajustada_mujer50 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*50)}
curva_ajustada_hombre50 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*50)}
curva_ajustada_mujer64 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*64)}
curva_ajustada_hombre64 <- function(x) {exp(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*64)}
ggplot(datos, aes(bmi, bpsystol)) +
geom_point() +
geom_function(fun = curva_ajustada_mujer30, aes(linetype = "mujer de 30") ,col="skyblue", lwd = 1) +
geom_function(fun = curva_ajustada_hombre30, aes(linetype = "hombre de 30") ,col="green") +
geom_function(fun = curva_ajustada_mujer50, aes(linetype = "mujer de 50") ,col="darkblue", lwd = 0.8) +
geom_function(fun = curva_ajustada_hombre50, aes(linetype = "hombre de 50") ,col="darkgreen") +
geom_function(fun = curva_ajustada_mujer64, aes(linetype = "mujer de 64") ,col="red") +
geom_function(fun = curva_ajustada_hombre64, aes(linetype = "hombre de 64") ,col="magenta") + theme_bw()
curva_ajustada_mujer30 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*30)^(-2)}
curva_ajustada_hombre30 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*30)^(-2)}
curva_ajustada_mujer50 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*50)^(-2)}
curva_ajustada_hombre50 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*50)^(-2)}
curva_ajustada_mujer64 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*64)^(-2)}
curva_ajustada_hombre64 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*64)^(-2)}
ggplot(datos, aes(bmi, bpsystol)) +
geom_point() +
geom_function(fun = curva_ajustada_mujer30, aes(linetype = "mujer de 30") ,col="skyblue", lwd = 1) +
geom_function(fun = curva_ajustada_hombre30, aes(linetype = "hombre de 30") ,col="green") +
geom_function(fun = curva_ajustada_mujer50, aes(linetype = "mujer de 50") ,col="darkblue", lwd = 0.8) +
geom_function(fun = curva_ajustada_hombre50, aes(linetype = "hombre de 50") ,col="darkgreen") +
geom_function(fun = curva_ajustada_mujer64, aes(linetype = "mujer de 64") ,col="red") +
geom_function(fun = curva_ajustada_hombre64, aes(linetype = "hombre de 64") ,col="magenta") + theme_bw()
AICmodelo1<-AIC(modelo1)
AICmodelo1
AICmodelo2<-AIC(modelo2)
AICmodelo2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg1B.csv", show_col_types = FALSE)
datos$sex<-factor(datos$sex) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$sex<-relevel(datos$sex,"1")
modelo1<-lm(data=datos, bpsystol ~ bmi + sex + age)
#stargazer(modelo1)
#par(mfrow = c(2, 2))
#####check_model function of performance package: Grphs####
pkgs <- c(
"flextable", "performance", "see", "lmtest", "ggplot2",
"qqplotr", "ggrepel", "patchwork", "boot", "rempsyc", "report"
)
#install.packages(pkgs)
library(flextable)
library(performance)
library(see)
library(lmtest)
library(qqplotr)
library(ggrepel)
library(patchwork)
library(boot)
library(rempsyc)
library(report)
#check_model(modelo1) #check_model() function of the performance package
###check_model function of performance package: p-values ###
#check_collinearity(modelo1) # VIF
#check_autocorrelation(modelo1) #  Autocorrelated residuals p value
#check_heteroscedasticity(modelo1) # non-constant error variance (heteroscedasticity): p value
#check_outliers(modelo1) # Outliers method and threshold: cook
# check_normality(modelo1) # Normality of residuals p value
par(mfrow = c(2, 2))
plot(modelo1)
table_tests<-nice_assumptions(modelo1)
table_tests_fin<-subset(table_tests, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
BoxCoxm1<-car::powerTransform(modelo1)
BoxCoxm1[6]
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelo2)
#stargazer(modelo2)
#modelo2=lm(data=datos, I(log(bpsystol)) ~ bmi + sex + age)
#summary(modelo2)
#stargazer(modelo2)
par(mfrow = c(2, 2))
plot(modelo2)
table_tests2<-nice_assumptions(modelo2)
table_tests_fin2<-subset(table_tests2, select = -c(Model,Diagnostic) )
kable(t(table_tests_fin2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F)
AICmodelo1<-AIC(modelo1)
AICmodelo1
AICmodelo2<-AIC(modelo2)
AICmodelo2
curva_ajustada_mujer30 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*30)^(-2)}
curva_ajustada_hombre30 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*30)^(-2)}
curva_ajustada_mujer50 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*50)^(-2)}
curva_ajustada_hombre50 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*50)^(-2)}
curva_ajustada_mujer64 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x + modelo2$coefficients[3] + modelo2$coefficients[4]*64)^(-2)}
curva_ajustada_hombre64 <- function(x) {(modelo2$coefficients[1] + modelo2$coefficients[2]*x  + modelo2$coefficients[4]*64)^(-2)}
ggplot(datos, aes(bmi, bpsystol)) +
geom_point() +
geom_function(fun = curva_ajustada_mujer30, aes(linetype = "mujer de 30") ,col="skyblue", lwd = 1) +
geom_function(fun = curva_ajustada_hombre30, aes(linetype = "hombre de 30") ,col="green") +
geom_function(fun = curva_ajustada_mujer50, aes(linetype = "mujer de 50") ,col="darkblue", lwd = 0.8) +
geom_function(fun = curva_ajustada_hombre50, aes(linetype = "hombre de 50") ,col="darkgreen") +
geom_function(fun = curva_ajustada_mujer64, aes(linetype = "mujer de 64") ,col="red") +
geom_function(fun = curva_ajustada_hombre64, aes(linetype = "hombre de 64") ,col="magenta") + theme_bw()
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelo2)
#stargazer(modelo2)
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
#summary(modelo2)
stargazer(modelo2)
modelo2=lm(data=datos, I(bpsystol^(-1/2)) ~ bmi + sex + age)
summary(modelo2)
#stargazer(modelo2)
(1/-4.155e-04)^2
View(datna)
View(datos)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
plot(modelo1)
par(mfrow = c(2, 2))
plot(modelo2)
ggplot(datos, aes(bmi, bpsystol)) +
geom_point() +
geom_function(fun = curva_ajustada_mujer30, aes(linetype = "mujer de 30") ,col="skyblue", lwd = 1) +
geom_function(fun = curva_ajustada_hombre30, aes(linetype = "hombre de 30") ,col="green") +
geom_function(fun = curva_ajustada_mujer50, aes(linetype = "mujer de 50") ,col="darkblue", lwd = 0.8) +
geom_function(fun = curva_ajustada_hombre50, aes(linetype = "hombre de 50") ,col="darkgreen") +
geom_function(fun = curva_ajustada_mujer64, aes(linetype = "mujer de 64") ,col="red") +
geom_function(fun = curva_ajustada_hombre64, aes(linetype = "hombre de 64") ,col="magenta") + theme_bw()
ggplot(datos, aes(bmi, bpsystol)) +
geom_point() +
geom_function(fun = curva_ajustada_mujer30, aes(linetype = "mujer de 30") ,col="skyblue", lwd = 1) +
geom_function(fun = curva_ajustada_hombre30, aes(linetype = "hombre de 30") ,col="green") +
geom_function(fun = curva_ajustada_mujer50, aes(linetype = "mujer de 50") ,col="darkblue", lwd = 0.8) +
geom_function(fun = curva_ajustada_hombre50, aes(linetype = "hombre de 50") ,col="darkgreen") +
geom_function(fun = curva_ajustada_mujer64, aes(linetype = "mujer de 64") ,col="red") +
geom_function(fun = curva_ajustada_hombre64, aes(linetype = "hombre de 64") ,col="magenta") + theme_bw()
