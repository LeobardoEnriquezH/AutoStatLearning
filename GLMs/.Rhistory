#summary(fit_comp)
#coef(fit_comp, matrix = TRUE) # Le indicamos que nos los muestre como matriz
#summary(fit_no_int)
#coef(fit_no_int, matrix = TRUE) # Le indicamos que nos los muestre como matriz
#Escribimos los dos modelos y la salida es la prueba
anova(fit_no_int, fit_comp, test="LRT", type = "I")
AIC_fit_comp<-AIC(fit_comp)
AIC_fit_no_int<-AIC(fit_no_int)
summary(fit_no_int)
Datos$Sat=factor(Datos$Sat, ordered=TRUE, levels = c("Low", "Medium", "High"))
#Ajustamos utilizando de nuevo la función vglm: modelo de probabilidades NO proporcionales
fit_ord_nopar <- vglm(Sat ~ Infl+Type+Cont,
family = cumulative(parallel = FALSE), #La diferencia es esta
data = Datos)
#El orden viene de que respuesta es tipo factor y a esta le pusimos orden
#Ajustamos utilizando de nuevo la función vglm: modelo de probabilidades proporcionales
fit_ord_par <- vglm(Sat ~ Infl+Type+Cont,
family = cumulative(parallel = TRUE), #La diferencia es esta
data = Datos)
#coef(fit_ord_nopar, matrix=TRUE)
#summary(fit_ord_par)
#coef(fit_ord_par, matrix=TRUE)
#Comparamos los modelos
anova(fit_ord_par, fit_ord_nopar, type = "I")
AIC_fit_ord_par<-AIC(fit_ord_par)
AIC_fit_ord_no_par<-AIC(fit_ord_nopar)
summary(fit_ord_par)
#Agruparemos los datos desagrupados
Datos$SatTypeInflCont=factor(paste(Datos$Sat, Datos$TypeInflCont, sep="."))
by_SatTypeInflCont <- Datos %>% group_by(SatTypeInflCont)
by_SatTypeInflCont<-by_SatTypeInflCont %>% tally()
Dat <- data.frame(do.call('rbind', strsplit(as.character(by_SatTypeInflCont$SatTypeInflCont),'.',fixed=TRUE)))
names(Dat) <- c("Sat", "Type", "Infl", "Cont")
Dat$SatTypeInflCont<-factor(paste(Dat$Sat, Dat$Type, Dat$Infl, Dat$Cont,sep="."))
DatosAg<-merge(Dat, by_SatTypeInflCont, by = "SatTypeInflCont", all = TRUE)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
View(datos_modelo)
View(datos_modelo)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Respuesta",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Respuesta, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades por Cont e Infl",
x = "Infl",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Respuesta",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades por Cont e Infl",
x = "Infl",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades por Contacto con vecinos (Cont) e Influencia en mantenimiento (Infl)",
x = "Influencia en mantenimiento de la vivienda",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia en mantenimiento de la vivienda",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia en mantenimiento de la vivienda",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
View(DatosAg)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(DatosAg$Type=="Apartment")  %>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type=="Apartment")  %>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(DatosAg, Type=="Apartment")%>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type == "Apartment")%>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type %in% "Apartment")%>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type %in% c("Apartment"))%>%unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
DatosAg%>%filter(Type %in% c("Apartment"))
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type %in% c("Apartment"))%>%unique(DatosAg[,4:5]) %>%
arrange(Infl, Cont)
DatosAg%>%filter(Type %in% c("Apartment"))%>%unique(DatosAg[,4:5])
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type %in% c("Apartment"))%>%
arrange(Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%filter(Type %in% c("Apartment"))%>%unique(DatosAg[,4:5]) %>%
arrange(Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- DatosAg%>%unique(DatosAg[,4:5]) %>%
arrange(Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- filter(DatosAg, Type %in% c("Apartment"))%>%unique(DatosAg[,4:5]) %>%
arrange(Infl, Cont)
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,4:5]) %>%
arrange(Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Obtenemos las combinaciones, aprovechando la tabla agregada
combinaciones <- unique(DatosAg[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia en mantenimiento de la vivienda",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
#Obtenemos las combinaciones, aprovechando la tabla agregada
DatosAg_Apartment<-DatosAg%>%filter(Type %in% "Apartment")
combinaciones <- unique(DatosAg_Apartment[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia en mantenimiento de la vivienda",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
#Obtenemos las combinaciones, con la tabla agregada
DatosAg_Apartment<-DatosAg%>%filter(Type %in% "Apartment") #Filtramos apartment
combinaciones <- unique(DatosAg_Apartment[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia (Infl) en mantenimiento del Apartment",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
#Obtenemos las combinaciones, con la tabla agregada
DatosAg_Apartment<-DatosAg%>%filter(Type %in% "Apartment") #Filtramos apartment
combinaciones <- unique(DatosAg_Apartment[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 5) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia (Infl) en mantenimiento del Apartment",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
#Obtenemos las combinaciones, con la tabla agregada
DatosAg_Apartment<-DatosAg%>%filter(Type %in% "Apartment") #Filtramos apartment
combinaciones <- unique(DatosAg_Apartment[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 4) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia (Infl) en mantenimiento del Apartment",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
#Obtenemos las combinaciones, con la tabla agregada
DatosAg_Apartment<-DatosAg%>%filter(Type %in% "Apartment") #Filtramos apartment
combinaciones <- unique(DatosAg_Apartment[,3:5]) %>%
arrange(Type, Infl, Cont)
#También podríamos obtenerla con los datos desagregados como:
#combinaciones <- unique(datos[,1:2]) %>% arrange(Sexo, Edad)
#Con esto aplicamos la función predict, con tipo "response" y tenemos:
probas <- predict(fit_ord_par, combinaciones, type = "response")
#Finalmente, unimos las combinaciones con sus probabilidafes
datos_modelo <- data.frame(cbind(combinaciones, probas))
#Le cambiamos el nombre, para más adelante (en caso de que no aparezcan los nombres)
colnames(datos_modelo)<-c("Type", "Infl", "Cont", "Low", "Medium", "High")
#En este caso, necesitamos los datos en tipo long
data_long <- datos_modelo %>%
pivot_longer(cols = c(`Low`, Medium, `High`),
names_to = "Sat",
values_to = "Probabilidad") %>%
#Aplicamos orden al tipo factor
mutate("Respuesta"=factor(Sat, levels = c("Low", "Medium", "High")), "Infl"=factor(Infl, levels = c("Low", "Medium", "High")), "Cont"=factor(Cont, levels = c("Low",  "High")))
#Con esto podemos crear la gráfica
ggplot(data_long, aes(x = Infl, y = Probabilidad, fill = Sat)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8),
width = 0.7) +
geom_text(aes(label = round(Probabilidad, 2)),
position = position_dodge(width = 0.8),
vjust = -0.7, size = 3) +  # Añadir etiquetas con probabilidades
facet_grid(. ~ Cont) + #Este nos permite separar por Cont
labs(
title = "Probabilidades de Satisfacción (Sat) por Contacto (Cont) e Influencia (Infl)",
x = "Influencia (Infl) en mantenimiento del Apartment",
y = "Probabilidad"
) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "top"
) + theme_bw()
