datos$p_Killed<-datos$Killed/datos$Number
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7) datos$muere=1
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7, datos$muere=1) datos$muere=0
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7 datos$muere=1) datos$muere=0
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7, 1) datos$muere=0
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7 1) datos$muere=0
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (datos$p_Killed>=0.7){datos$p_Killed=1}
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (p_Killed>=0.7){p_Killed=1}
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if (p_Killed>=0.7){p_Killed="1"}
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if(p_Killed>=0.7){p_Killed="1"}
View(datos)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if(p_Killed>=0.7) 1 else 0
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(p_Killed>=0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed>=0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed==0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed=0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed=>0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed>=0.7) 1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed>=0.7) datos$p_Killed=1 else 0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%(if(datos$p_Killed>=0.7) datos$p_Killed=1 else datos$p_Killed=0)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if(datos$p_Killed>=0.7)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos%>%if(datos$p_Killed>=0.7) 1
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos$p_Killed%>%if(datos$p_Killed>=0.7) 1
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos$p_Killed%>%if(p_Killed>=0.7) 1
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos$p_Killed%>%if(>=0.7) 1
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<-datos$p_Killed %>% mutate_if(is.numeric, ~1 * (. > 0))
datos$p_Killed<-datos$Killed/datos$Number
datos$NEW_COLUMN_NAME <- ifelse( datos$p_Killed> 0.67, 1, " ")
View(datos)
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<- ifelse( datos$p_Killed> 0.67, 1, 0)
View(datos)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg3B.csv", show_col_types = FALSE)
datos$Insecticide<-factor(datos$Insecticide) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$Insecticide<-relevel(datos$Insecticide,"A")
datos$p_Killed<-datos$Killed/datos$Number
datos$muere<- ifelse( datos$p_Killed> 0.67, 1, 0)
ggplot(data=datos, aes(x=Deposit,y=Killed, colour=Insecticide))+ geom_point()+ theme_classic()
View(datos)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg3B.csv", show_col_types = FALSE)
datos$Insecticide<-factor(datos$Insecticide) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$Insecticide<-relevel(datos$Insecticide,"A")
datos$p_Killed<-datos$Killed/datos$Number
datos$mueren70<- ifelse( datos$p_Killed> 0.67, 1, 0)
ggplot(data=datos, aes(x=Deposit,y=p_Killed, colour=Insecticide))+ geom_point()+ theme_classic()
datos$lnD=ln(datos$Deposit)
datos$lnD=log(datos$Deposit)
#Hay 4 ligas que se podrían usar:
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitlog=glm(mueren70~Insecticide*lnD, family = binomial(link="log"), data=datos)
#Hay 4 ligas que se podrían usar:
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
#fitlog=glm(mueren70~Insecticide*lnD, family = binomial(link="log"), data=datos)
#summary(fitlog)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
#Hay 4 ligas que se podrían usar:
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
fitlog=glm(mueren70~Insecticide*lnD, family = binomial(link="log"), data=datos)
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
n=c(11,63-11,14, 107-14, 12, 55-12, 32, 113-32)
Y=c("Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No")
Z=c("b", "b", "w", "w", "b", "b", "w", "w")
X=c("AZT", "AZT", "AZT", "AZT", "NoAZT", "NoAZT", "NoAZT", "NoAZT")
#Datos agrupados forma 1
DatosAg= data.frame(cbind(n,Y,Z,X))
summary(DatosAg)
DatosAg$n=as.numeric(as.character(DatosAg$n))
summary(DatosAg)
#Datos desagrupados (más común en la práctica)
head(DatosAg)
library(tidyverse)
Datos=DatosAg %>% group_by(Y,Z,X) %>%
do( data.frame(unos= rep(1, .$n)) )
head(Datos)
sum(DatosAg$n)
summary(Datos)
Datos=as.data.frame(Datos)
Datos[sapply(Datos, is.character)] <- lapply(Datos[sapply(Datos, is.character)],
as.factor)
summary(Datos)
#En lo que sigue usaremos los datos no agrupados
fitlogit=glm(Y~X*Z, family = binomial(link="logit"), data=Datos)
summary(fitlogit)
fitprob=glm(Y~X*Z, family = binomial(link="probit"), data=Datos)
summary(fitprob)
fitlog=glm(Y~X*Z, family = binomial(link="log"), data=Datos)
summary(fitlog)
fitcll=glm(Y~X*Z, family = binomial(link="cloglog"), data=Datos)
summary(fitcll)
newdata <- data.frame(X = c("AZT", "NoAZT","AZT", "NoAZT"), Z = c("b", "b","w", "w") )
View(newdata)
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$log <- predict(fitlog, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "B","C", "A", "B", "C"), lnD = c("0.6931472", "0.9707789","1.2470323", "1.5238800") )
newdata <- data.frame(Insecticide = c("A", "B","C", "A", "B", "C"), lnD = c(0.6931472, 0.9707789,1.2470323, 1.5238800) )
newdata <- data.frame(Insecticide = c("A", "B","C", "A", "B", "C"), lnD = c(0.6931472, 0.9707789,1.2470323, 1.5238800, 1.8017098, 2.0794415) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata <- data.frame(Insecticide = c("A", "B","C"), lnD = c(0.6931472, 0.9707789,1.2470323, 1.5238800, 1.8017098, 2.0794415) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata <- data.frame(Insecticide = c("A", "B","C"), lnD = c(0.6931472, 0.9707789,1.2470323, 1.5238800, 1.8017098, 2.0794415) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata <- data.frame(Insecticide = c("A", "B","C"), lnD = c(0.6931472, 0.9707789, 1.2470323) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
View(newdata)
newdata <- data.frame(Insecticide = c("A", "B","C"), lnD = c(0.6931472, 0.9707789, 1.2470323) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
View(newdata)
newdata <- data.frame(Insecticide = c("A", "B","C"), lnD = c("0.6931472", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","B","C"), lnD = c("0.6931472", "0.9707789", "1.2470323","0.6931472", "0.9707789", "1.2470323",, "0.9707789", "1.2470323") )
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","B","C"), lnD = c("0.6931472", "0.9707789", "1.2470323","0.6931472", "0.9707789", "1.2470323", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c("0.6931472", "0.9707789", "1.2470323","1.5238800", "1.8017098", "2.0794415", "0.9707789", "0.9707789") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c("0.6931472", "0.9707789", "1.2470323","1.5238800", "1.8017098", "2.0794415", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
#Generar variables con datos en logaritmos
datos$lnD=log(datos$Deposit)
datos$lnD=factor(datos$lnD) #declaramos la variable como factor
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c("0.6931472", "0.9707789", "1.2470323","1.5238800", "1.8017098", "2.0794415", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
#Generar variables con datos en logaritmos
datos$lnD=log(datos$Deposit)
#datos$lnD=factor(datos$lnD) #declaramos la variable como factor
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c("0.6931472", "0.9707789", "1.2470323","1.5238800", "1.8017098", "2.0794415", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(stargazer)
library(kableExtra)
datos<-read_csv("Preg3B.csv", show_col_types = FALSE)
datos$Insecticide<-factor(datos$Insecticide) #declaramos la variable como factor
#Realizamos un relevel para poner como referencia "1"
datos$Insecticide<-relevel(datos$Insecticide,"A")
#Creamos dato de proporcion de insectos que mueren
datos$p_Killed<-datos$Killed/datos$Number
#Generar la variable muere o no muere, 70% o más.
datos$mueren70<- ifelse( datos$p_Killed> 0.67, 1, 0)
ggplot(data=datos, aes(x=Deposit,y=p_Killed, colour=Insecticide))+ geom_point()+ theme_classic()
#Generar variables con datos en logaritmos
datos$lnD=log(datos$Deposit)
#datos$lnD=factor(datos$lnD) #declaramos la variable como factor
#En general hay 4 ligas que se podrían usar para covariables factores: logit, probit, cloglog y log.
#Aqui emplearemos 3 ligas porque tenemos una variable numérica entre las covariables, omitimos liga log.
fitlogit=glm(mueren70~Insecticide*lnD, family = binomial(link="logit"), data=datos)
summary(fitlogit)
fitprob=glm(mueren70~Insecticide*lnD, family = binomial(link="probit"), data=datos)
summary(fitprob)
fitcll=glm(mueren70~Insecticide*lnD, family = binomial(link="cloglog"), data=datos)
summary(fitcll)
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c("0.6931472", "0.9707789", "1.2470323","1.5238800", "1.8017098", "2.0794415", "0.9707789", "1.2470323") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B"), lnD = c(0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.9707789, 1.2470323) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "B","C","A", "B","C","A","B", "C"), lnD = c(0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.9707789, 1.2470323, 1.5238800) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "A","A","A", "A","A","B","B", "B", "B","B", "B"), lnD = c(0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
newdata <- data.frame(Insecticide = c("A", "A","A","A", "A","A","B","B", "B", "B","B", "B","C","C", "C", "C","C", "C"), lnD = c(0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415, 0.6931472, 0.9707789, 1.2470323,1.5238800, 1.8017098, 2.0794415) )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
#Además con el modelo completo también los criterios AIC y BIC coinciden
c(AIC(fitlogit), AIC(fitprob), AIC(fitlog), AIC(fitcll))
#Además con el modelo completo también los criterios AIC y BIC coinciden
c(AIC(fitlogit), AIC(fitprob),  AIC(fitcll))
c(BIC(fitlogit), BIC(fitprob),  BIC(fitcll))
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,
0,0,1,0,
0,0,0,1), ncol=4, nrow=3, byrow=TRUE)
m=c(0,0,0)
summary(glht(fitlogit, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,0,0,
0,0,1,0,0,0,
0,0,0,1,0,0,
0,0,0,0,1,0,
0,0,0,0,0,1), ncol=6, nrow=5, byrow=TRUE)
m=c(0,0,0,0,0)
summary(glht(fitlogit, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
### Ejemplo de problema tipo ANOVA (dos factores)
### con datos binarios
### Parte 2. Comparación de modelos con diferentes funciones ligas,
### verificación de supuestos e interpretación.
rm(list = ls(all.names = TRUE))
gc()
# El NYT reportó resultados sobre el efecto del medicamento AZT
#(Zidovudina o Azidotimidina fue el primer medicamento antirretroviral para el desarrollo de SIDA)
# para disminuir el desarrollo de los síntomas de SIDA (Feb 15, 1991).
# Un grupo de 338 veteranos cuyo sistema inmune empezaba a mostrar signos de la
# enfermedad causada por el VIH fueron considerados para el estudio.
# De forma aleatoria se asignó la aplicación de AZT, de manera que
# a un grupo se le aplicó de forma inmediata
# y al otro grupo se le aplicó hasta que sus células T mostraban que el
# sistema inmune estaba muy débil.
# Para ajustar los grupos se consideró la raza de los veteranos
# Las tres variables que se consideraron son:
# X= 1 si se aplicó el AZT de forma inmediata
# Z= raza (blanca, negra)
# Y= desarrollo de síntomas de SIDA (1-Yes, 0-No)
# Los resultaron fueron los siguientes.
# Durante los primeros 3 años del estudio,
# de los que recibieron de forma inmediata AZT
# 11 de 63 veteranos de raza negra desarrollaron síntomas de SIDA
# y que 14 de 107 de raza blanca.
# De los que NO recibieron de forma inmediata AZT
# 12 de 55 veteranos de raza negra desarrollaron síntomas de SIDA
# y que 32 de 113 de raza blanca
# ¿Qué se puede inferir con estos datos sobre el uso o no de AZT?
# ¿Existe evidencia de un beneficio al suministrar AZT?
n=c(11,63-11,14, 107-14, 12, 55-12, 32, 113-32)
Y=c("Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No")
Z=c("b", "b", "w", "w", "b", "b", "w", "w")
X=c("AZT", "AZT", "AZT", "AZT", "NoAZT", "NoAZT", "NoAZT", "NoAZT")
#Datos agrupados forma 1
DatosAg= data.frame(cbind(n,Y,Z,X))
summary(DatosAg)
DatosAg$n=as.numeric(as.character(DatosAg$n))
summary(DatosAg)
#Datos desagrupados (más común en la práctica)
head(DatosAg)
library(tidyverse)
Datos=DatosAg %>% group_by(Y,Z,X) %>%
do( data.frame(unos= rep(1, .$n)) )
head(Datos)
sum(DatosAg$n)
summary(Datos)
Datos=as.data.frame(Datos)
Datos[sapply(Datos, is.character)] <- lapply(Datos[sapply(Datos, is.character)],
as.factor)
summary(Datos)
#En lo que sigue usaremos los datos no agrupados
#Comenzaremos con el modelo más completo, es decir
#incluyendo interacciones
#Hay 4 ligas que se podrían usar:
fitlogit=glm(Y~X*Z, family = binomial(link="logit"), data=Datos)
summary(fitlogit)
fitprob=glm(Y~X*Z, family = binomial(link="probit"), data=Datos)
summary(fitprob)
fitlog=glm(Y~X*Z, family = binomial(link="log"), data=Datos)
summary(fitlog)
fitcll=glm(Y~X*Z, family = binomial(link="cloglog"), data=Datos)
summary(fitcll)
#Notar que las estimaciones son diferentes, pues cada modelo
#tiene una distinta forma de representar la relación entre la media
#y las covariables
#Sin embargo, dado que las covariables son categóricas,
#el modelo más completo
#(incluye todas las interacciones entre las covariables que se considera),
#lleva a que las estimaciones de las probabilidades son las mismas
#sin importar la liga que se use
newdata <- data.frame(X = c("AZT", "NoAZT","AZT", "NoAZT"), Z = c("b", "b","w", "w") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$log <- predict(fitlog, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
#Además con el modelo completo también los criterios AIC y BIC coinciden
c(AIC(fitlogit), AIC(fitprob), AIC(fitlog), AIC(fitcll))
c(BIC(fitlogit), BIC(fitprob), BIC(fitlog), BIC(fitcll))
#Las diferencias se observarán al considerar modelos reducidos que
#no incluyan ciertas interacciones entre las variables
#Tomemos en lo que sigue de referencia el modelo logit
summary(fitlogit)
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,
0,0,1,0,
0,0,0,1), ncol=4, nrow=3, byrow=TRUE)
m=c(0,0,0)
summary(glht(fitlogit, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
### Ejemplo de problema tipo ANOVA (dos factores)
### con datos binarios
### Parte 2. Comparación de modelos con diferentes funciones ligas,
### verificación de supuestos e interpretación.
rm(list = ls(all.names = TRUE))
gc()
# El NYT reportó resultados sobre el efecto del medicamento AZT
#(Zidovudina o Azidotimidina fue el primer medicamento antirretroviral para el desarrollo de SIDA)
# para disminuir el desarrollo de los síntomas de SIDA (Feb 15, 1991).
# Un grupo de 338 veteranos cuyo sistema inmune empezaba a mostrar signos de la
# enfermedad causada por el VIH fueron considerados para el estudio.
# De forma aleatoria se asignó la aplicación de AZT, de manera que
# a un grupo se le aplicó de forma inmediata
# y al otro grupo se le aplicó hasta que sus células T mostraban que el
# sistema inmune estaba muy débil.
# Para ajustar los grupos se consideró la raza de los veteranos
# Las tres variables que se consideraron son:
# X= 1 si se aplicó el AZT de forma inmediata
# Z= raza (blanca, negra)
# Y= desarrollo de síntomas de SIDA (1-Yes, 0-No)
# Los resultaron fueron los siguientes.
# Durante los primeros 3 años del estudio,
# de los que recibieron de forma inmediata AZT
# 11 de 63 veteranos de raza negra desarrollaron síntomas de SIDA
# y que 14 de 107 de raza blanca.
# De los que NO recibieron de forma inmediata AZT
# 12 de 55 veteranos de raza negra desarrollaron síntomas de SIDA
# y que 32 de 113 de raza blanca
# ¿Qué se puede inferir con estos datos sobre el uso o no de AZT?
# ¿Existe evidencia de un beneficio al suministrar AZT?
n=c(11,63-11,14, 107-14, 12, 55-12, 32, 113-32)
Y=c("Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No")
Z=c("b", "b", "w", "w", "b", "b", "w", "w")
X=c("AZT", "AZT", "AZT", "AZT", "NoAZT", "NoAZT", "NoAZT", "NoAZT")
#Datos agrupados forma 1
DatosAg= data.frame(cbind(n,Y,Z,X))
summary(DatosAg)
DatosAg$n=as.numeric(as.character(DatosAg$n))
summary(DatosAg)
#Datos desagrupados (más común en la práctica)
head(DatosAg)
library(tidyverse)
Datos=DatosAg %>% group_by(Y,Z,X) %>%
do( data.frame(unos= rep(1, .$n)) )
head(Datos)
sum(DatosAg$n)
summary(Datos)
Datos=as.data.frame(Datos)
Datos[sapply(Datos, is.character)] <- lapply(Datos[sapply(Datos, is.character)],
as.factor)
summary(Datos)
#En lo que sigue usaremos los datos no agrupados
#Comenzaremos con el modelo más completo, es decir
#incluyendo interacciones
#Hay 4 ligas que se podrían usar:
fitlogit=glm(Y~X*Z, family = binomial(link="logit"), data=Datos)
summary(fitlogit)
fitprob=glm(Y~X*Z, family = binomial(link="probit"), data=Datos)
summary(fitprob)
fitlog=glm(Y~X*Z, family = binomial(link="log"), data=Datos)
summary(fitlog)
fitcll=glm(Y~X*Z, family = binomial(link="cloglog"), data=Datos)
summary(fitcll)
#Notar que las estimaciones son diferentes, pues cada modelo
#tiene una distinta forma de representar la relación entre la media
#y las covariables
#Sin embargo, dado que las covariables son categóricas,
#el modelo más completo
#(incluye todas las interacciones entre las covariables que se considera),
#lleva a que las estimaciones de las probabilidades son las mismas
#sin importar la liga que se use
newdata <- data.frame(X = c("AZT", "NoAZT","AZT", "NoAZT"), Z = c("b", "b","w", "w") )
newdata$logit <- predict(fitlogit, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$prob <- predict(fitprob, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$log <- predict(fitlog, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata$cll <- predict(fitcll, newdata[,1:2], type = c("response"), se.fit=TRUE)$fit
newdata
#Además con el modelo completo también los criterios AIC y BIC coinciden
c(AIC(fitlogit), AIC(fitprob), AIC(fitlog), AIC(fitcll))
c(BIC(fitlogit), BIC(fitprob), BIC(fitlog), BIC(fitcll))
#Las diferencias se observarán al considerar modelos reducidos que
#no incluyan ciertas interacciones entre las variables
#Tomemos en lo que sigue de referencia el modelo logit
summary(fitlogit)
#La primera prueba que se debe realizar es
#la similar a la prueba asociada a la tabla ANOVA en regresión lineal múltiple
library(multcomp)
K=matrix(c(0,1,0,0,
0,0,1,0,
0,0,0,1), ncol=4, nrow=3, byrow=TRUE)
m=c(0,0,0)
summary(glht(fitlogit, linfct=K, rhs=m), test=Chisqtest())  #Chisqtest() es apropiada para datos donde y no es continua
# Se rechaza H0, lo que implica que se puede proceder
# al análisis del modelo
#Por lo general, en un problema tipo ANOVA
# se desea un modelo reducido antes de hacer
# la inferencia sobre la variable de interés (X)
#Por ejemplo, se procede a eliminar las interacciones.
#En este caso correspondería sólo al parámetro beta3.
#Dado que aquí sólo hay una variable asociada a la interacción
#se puede leer directamente del summary
#El p-value es .240, por lo que no se rechaza H0
#Un modelo reducido con sólo efectos principales es plausible
fitlogitb=glm(Y~X+Z, family = binomial(link="logit"), data=Datos)
summary(fitlogitb)
#Notar que también a partir de este modelo se puede
#reducir aún más el modelo, pues parece que la variable Z
#no agrega información relevante en la modelación
#de la esperanza una vez que se agrega la variable X (p-value =.84755)
fitlogitc=glm(Y~X, family = binomial(link="logit"), data=Datos)
summary(fitlogitc)
#Con este modelo podríamos ya responder las preguntas
#sobre el efecto de la variable X
#Notar que con la prueba de bondad de ajuste
#no se rechaza H0
#es decir, el modelo es plausible para los datos
anova(fitlogit, fitlogitc, test = "Chisq")
#Algo similar se debería realizar con el resto de modelos
fitprobc=glm(Y~X, family = binomial(link="probit"), data=Datos)
fitlogc=glm(Y~X, family = binomial(link="log"), data=Datos)
fitcllc=glm(Y~X, family = binomial(link="cloglog"), data=Datos)
c(AIC(fitlogitc), AIC(fitprobc), AIC(fitlogc), AIC(fitcllc))
#Nuevamente es un modelo que incluye sólo una variable (sería el completo)
#Por eso la coincidencia. En general, con variables continuas no se
#obtiene la coincidencia y se debería seleccionar una liga.
#Uno de los aspectos más relevantes es analizar si el modelo era adecuado
#antes de realizar las pruebas de hipótesis
#Es decir, con el modelo con interacciones
X11()
library(ggplot2)
library(ggResidpanel)
resid_panel(fitlogit, plots=c("all"))
